import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.offline as py
py.init_notebook_mode(connected=True)
import plotly.graph_objs as go
import plotly.tools as tls

%matplotlib inline



global_country = pd.read_csv('GlobalLandTemperaturesByCountry.csv')


global_country.head()

global_country.shape

sort_by_temp_desc = global_country.sort_values('AverageTemperature', ascending=False)
sort_by_temp_desc

global_temp = pd.read_csv('GlobalTemperatures.csv')

global_temp = global_temp[['dt', 'LandAndOceanAverageTemperature']]
global_temp.dropna(inplace=True)
global_temp['dt'] = pd.to_datetime(global_temp['dt']).dt.year.astype(str)
global_temp = global_temp.groupby(['dt'])['LandAndOceanAverageTemperature'].mean().reset_index()

plt.figure(figsize=(16, 6))

# Corrected line using global_temp instead of df
plt.plot(global_temp['dt'].values, global_temp['LandAndOceanAverageTemperature'].values, label='Line Plot')

#ax = sns.lineplot(
   #x = global_temp['dt'].to_numpy(),
   #y = global_temp['LandAndOceanAverageTemperature'].to_numpy())

#plt.set_title('Average Global Temperature Movement')
#plt.set_ylabel('Average Global Temperature')
#plt.set_xlabel('Year (1750 - 2015)')

# Rotate x-axis labels for better readability
#plt.xticks(rotation=45)

# Display legend
#plt.legend()

plt.show()

global_temp

# Preparing the data for machine learning
X = global_temp.iloc[:, global_temp.columns != 'LandAndOceanAverageTemperature'].values
y = global_temp.iloc[:, global_temp.columns == 'LandAndOceanAverageTemperature'].values

y[:20]

# Splitting the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

X_train

# Fitting a linear regression to the training set
from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X_train, y_train)

# Predicting the test set results
y_pred = regressor.predict(X_test)

X_train = X_train.astype('float64')
y_train = y_train.astype('float64')
X_test = X_test.astype('float64')
y_test = y_test.astype('float64')

# Visualising the training set results
plt.scatter(X_train, y_train, color = 'green')
plt.plot(X_train, regressor.predict(X_train), color = 'blue')
plt.title('Average Global Temperature (Training Set)')
plt.xlabel('Year')
plt.ylabel('Temperatre (c)')
plt.show()

# Visualising the test set results
plt.scatter(X_test, y_test, color = 'red')
plt.plot(X_train, regressor.predict(X_train), color = 'blue')
plt.title('Average Global Temperature (Test set)')
plt.xlabel('Year')
plt.ylabel('Temperature(c)')
plt.show()

# Building the predictor
X_predict = [2050] # Enter the year that you require the temperature for
X_predict = np.array(X_predict).reshape(1, -1)#
y_predict = regressor.predict(X_predict)

# Outputting the predicted temperature of the year above
y_predict

from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Fitting a Random Forest regressor to the training set
rf_regressor = RandomForestRegressor(n_estimators=100, random_state=0)
rf_regressor.fit(X_train, y_train.ravel())  # ravel y_train to avoid warnings

# Predicting the test set results
y_pred_rf = rf_regressor.predict(X_test)

# Evaluate accuracy
mse_rf = mean_squared_error(y_test, y_pred_rf)
r2_rf = r2_score(y_test, y_pred_rf)

# Print accuracy metrics
print("Mean Squared Error (Random Forest):", mse_rf)
print("R-squared (Random Forest):", r2_rf)




# Convert R-squared to percentage accuracy
percentage_accuracy = r2_rf * 100

# Print percentage accuracy
print("Accuracy:", percentage_accuracy)
